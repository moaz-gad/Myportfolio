{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Hamada\\\\Desktop\\\\React-portfolios\\\\New folder\\\\portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hamada\\\\Desktop\\\\React-portfolios\\\\New folder\\\\portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n/* eslint-env browser */\n\n/* global module */\nexport function addDebugMetadata(instance, stackIndex) {\n  // @ts-expect-error todo: stacktrace does not exist on error (non standard browser?)\n  var _Error = new Error(\"stacktrace source\"),\n    stack = _Error.stack,\n    stacktrace = _Error.stacktrace,\n    message = _Error.message;\n  instance.debug = {\n    stackInfo: {\n      stack: stack,\n      stacktrace: stacktrace,\n      message: message\n    },\n    stackIndex: stackIndex\n  };\n} // DEVTOOLS SETUP\n\nexport var setupDevtoolsExtension = function setupDevtoolsExtension() {\n  var atomicMap = {};\n  var extensionsMap = new Map();\n  var stylesMap = new Map();\n  var getStyles = function getStyles(className) {\n    var styles = {};\n    if (typeof className !== \"string\") {\n      return styles;\n    }\n    if (stylesMap.has(className)) {\n      styles.styles = stylesMap.get(className);\n      var classList = className.split(\" \");\n      if (classList.length) {\n        var classes = {};\n        classList.forEach(function (singleClassName) {\n          classes[singleClassName] = atomicMap[singleClassName];\n        });\n        styles.classes = classes;\n      }\n      if (extensionsMap.has(className)) {\n        var extension = extensionsMap.get(className);\n        styles.extends = extension;\n      }\n      return styles;\n    }\n  };\n  window.__STYLETRON_DEVTOOLS__ = {\n    atomicMap: atomicMap,\n    extensionsMap: extensionsMap,\n    stylesMap: stylesMap,\n    getStyles: getStyles\n  };\n}; // todo: export debug engine interface\n\nexport var BrowserDebugEngine = /*#__PURE__*/function () {\n  function BrowserDebugEngine(worker) {\n    _classCallCheck(this, BrowserDebugEngine);\n    if (!worker) {\n      var workerBlob = new Blob([\"importScripts(\\\"https://unpkg.com/css-to-js-sourcemap-worker@2.0.5/worker.js\\\")\"], {\n        type: \"application/javascript\"\n      });\n      worker = new Worker(URL.createObjectURL(workerBlob));\n      worker.postMessage({\n        id: \"init_wasm\",\n        url: \"https://unpkg.com/css-to-js-sourcemap-worker@2.0.5/mappings.wasm\"\n      });\n      worker.postMessage({\n        id: \"set_render_interval\",\n        interval: 120\n      });\n      if (module.hot) {\n        module.hot.addStatusHandler(function (status) {\n          if (status === \"dispose\") {\n            worker.postMessage({\n              id: \"invalidate\"\n            });\n          }\n        });\n      }\n    }\n    this.worker = worker;\n    this.counter = 0;\n    this.worker.onmessage = function (msg) {\n      var _msg$data = msg.data,\n        id = _msg$data.id,\n        css = _msg$data.css;\n      if (id === \"render_css\" && css) {\n        var style = document.createElement(\"style\");\n        style.appendChild(document.createTextNode(css));\n        document.head.appendChild(style);\n      }\n    };\n  }\n  _createClass(BrowserDebugEngine, [{\n    key: \"debug\",\n    value: function debug(_ref) {\n      var stackIndex = _ref.stackIndex,\n        stackInfo = _ref.stackInfo;\n      var className = \"__debug-\".concat(this.counter++);\n      this.worker.postMessage({\n        id: \"add_mapped_class\",\n        className: className,\n        stackInfo: stackInfo,\n        stackIndex: stackIndex\n      });\n      return className;\n    }\n  }]);\n  return BrowserDebugEngine;\n}(); // todo: export debug engine interface\n\nexport var NoopDebugEngine = /*#__PURE__*/function () {\n  function NoopDebugEngine() {\n    _classCallCheck(this, NoopDebugEngine);\n  }\n  _createClass(NoopDebugEngine, [{\n    key: \"debug\",\n    value: function debug() {\n      return;\n    }\n  }]);\n  return NoopDebugEngine;\n}();\nexport var DebugEngine = true ? BrowserDebugEngine : NoopDebugEngine;","map":null,"metadata":{},"sourceType":"module"}