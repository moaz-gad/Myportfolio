{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Hamada\\\\Desktop\\\\React-portfolios\\\\New folder\\\\portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Hamada\\\\Desktop\\\\React-portfolios\\\\New folder\\\\portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hamada\\\\Desktop\\\\React-portfolios\\\\New folder\\\\portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Hamada\\\\Desktop\\\\React-portfolios\\\\New folder\\\\portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Hamada\\\\Desktop\\\\React-portfolios\\\\New folder\\\\portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Hamada\\\\Desktop\\\\React-portfolios\\\\New folder\\\\portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/* eslint-env browser */\n\n/* eslint-disable no-unused-vars, no-redeclare, no-shadow */\nimport * as React from \"react\";\nimport { driver, getInitialStyle } from \"styletron-standard\";\nimport { addDebugMetadata, setupDevtoolsExtension, DebugEngine } from \"./dev-tool\";\nexport { DebugEngine };\nvar noopEngine = {\n  renderStyle: function renderStyle() {\n    return \"\";\n  },\n  renderKeyframes: function renderKeyframes() {\n    return \"\";\n  },\n  renderFontFace: function renderFontFace() {\n    return \"\";\n  }\n};\nvar StyletronContext = /*#__PURE__*/React.createContext(noopEngine);\nvar HydrationContext = /*#__PURE__*/React.createContext(false);\nvar DebugEngineContext = /*#__PURE__*/React.createContext(undefined); //todo: theme context removed\nvar DevProvider = /*#__PURE__*/function (_React$Component) {\n  _inherits(DevProvider, _React$Component);\n  function DevProvider(props) {\n    var _this;\n    _classCallCheck(this, DevProvider);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DevProvider).call(this, props));\n    _this.state = {\n      hydrating: Boolean(props.debugAfterHydration)\n    };\n    return _this;\n  }\n  _createClass(DevProvider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (true) {\n        if (this.state.hydrating === true) {\n          this.setState({\n            hydrating: false\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(StyletronContext.Provider, {\n        value: this.props.value\n      }, /*#__PURE__*/React.createElement(DebugEngineContext.Provider, {\n        value: this.props.debug\n      }, /*#__PURE__*/React.createElement(HydrationContext.Provider, {\n        value: this.state.hydrating\n      }, this.props.children)));\n    }\n  }]);\n  return DevProvider;\n}(React.Component);\nexport var Provider = true && process.env.NODE_ENV !== \"production\" ? DevProvider : StyletronContext.Provider;\nif (true && process.env.NODE_ENV !== \"production\" && !window.__STYLETRON_DEVTOOLS__) {\n  setupDevtoolsExtension();\n}\nfunction checkNoopEngine(engine) {\n  // if no engine provided, we default to no-op, handy for tests\n  // however, print a warning in other envs\n  if (process.env.NODE_ENV !== \"test\") {\n    engine === noopEngine &&\n    // eslint-disable-next-line no-console\n    console.warn(process.env.NODE_ENV !== \"production\" ? \"\\nStyletron has been switched to a no-op (test) mode.\\n\\nA Styletron styled component was rendered, but no Styletron engine instance was provided in React context.\\n\\nDid you forget to provide a Styletron engine instance to React context via using the Styletron provider component?\\n\\nNote: Providers and Consumers must come from the exact same React.createContext call to work.\\nIf your app has multiple instances of the \\\"styletron-react\\\" package in your node_module tree,\\nyour Provider may be coming from a different React.createContext call, which means the styled components\\nwill not recieve the provided engine instance. This scenario can arise, for example, when using \\\"npm link\\\".\\n\" : \"Styletron Provider is not set up. Defaulting to no-op.\");\n  }\n}\nexport function useStyletron() {\n  var styletronEngine = React.useContext(StyletronContext);\n  var debugEngine = React.useContext(DebugEngineContext);\n  var hydrating = React.useContext(HydrationContext);\n  checkNoopEngine(styletronEngine);\n  var debugClassName = React.useRef(\"\");\n  var prevDebugClassNameDeps = React.useRef([]);\n  return [function css(style) {\n    var className = driver(style, styletronEngine);\n    if (!(true && process.env.NODE_ENV !== \"production\")) {\n      return className;\n    }\n    var _Error = new Error(\"stacktrace source\"),\n      stack = _Error.stack,\n      message = _Error.message;\n    var nextDeps = [debugEngine, hydrating];\n    if (prevDebugClassNameDeps.current[0] !== nextDeps[0] || prevDebugClassNameDeps.current[1] !== nextDeps[1]) {\n      if (debugEngine && !hydrating) {\n        debugClassName.current = debugEngine.debug({\n          stackInfo: {\n            stack: stack,\n            message: message\n          },\n          stackIndex: 1\n        });\n      }\n      prevDebugClassNameDeps.current = nextDeps;\n    }\n    if (debugClassName.current) {\n      return \"\".concat(debugClassName.current, \" \").concat(className);\n    }\n    return className;\n  }];\n}\nexport function createStyled(_ref) {\n  var getInitialStyle = _ref.getInitialStyle,\n    driver = _ref.driver,\n    wrapper = _ref.wrapper;\n  function styled(base, styleArg) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (base.__STYLETRON__) {\n        /* eslint-disable no-console */\n        console.warn(\"It appears you are passing a styled component into `styled`.\");\n        console.warn(\"For composition with existing styled components, use `withStyle` or `withTransform` instead.\");\n        /* eslint-enable no-console */\n      }\n    }\n\n    var baseStyletron = {\n      reducers: [],\n      base: base,\n      driver: driver,\n      getInitialStyle: getInitialStyle,\n      wrapper: wrapper\n    };\n    if (true && process.env.NODE_ENV !== \"production\") {\n      addDebugMetadata(baseStyletron, 2);\n    }\n    return createStyledElementComponent(autoComposeShallow(baseStyletron, styleArg));\n  }\n  return styled;\n}\nexport var styled = createStyled({\n  getInitialStyle: getInitialStyle,\n  driver: driver,\n  wrapper: function wrapper(Component) {\n    return Component;\n  }\n});\nexport var withTransform = function withTransform(component, transformer) {\n  var styletron = component.__STYLETRON__;\n  if (true && process.env.NODE_ENV !== \"production\") {\n    addDebugMetadata(styletron, 2);\n  }\n  return createStyledElementComponent(composeDynamic(styletron, transformer));\n};\nexport var withStyleDeep = function withStyleDeep(component, styleArg) {\n  // @ts-ignore\n  var styletron = component.__STYLETRON__;\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!styletron) {\n      /* eslint-disable no-console */\n      console.warn(\"The first parameter to `withStyle` must be a styled component (without extra wrappers).\");\n      /* eslint-enable no-console */\n    }\n  }\n\n  if (true && process.env.NODE_ENV !== \"production\") {\n    addDebugMetadata(styletron, 2);\n    return createStyledElementComponent(addExtension(autoComposeDeep(styletron, styleArg), component, styleArg));\n  } else {\n    return createStyledElementComponent(autoComposeDeep(styletron, styleArg));\n  }\n};\nexport var withStyle = withStyleDeep;\nexport var withWrapper = function withWrapper(component, wrapper) {\n  var styletron = component.__STYLETRON__;\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!styletron) {\n      /* eslint-disable no-console */\n      console.warn(\"The first parameter to `withWrapper` must be a styled component (without extra wrappers).\");\n      /* eslint-enable no-console */\n    }\n  }\n\n  var composed = {\n    getInitialStyle: styletron.getInitialStyle,\n    base: styletron.base,\n    driver: styletron.driver,\n    wrapper: wrapper,\n    reducers: styletron.reducers\n  };\n  if (true && process.env.NODE_ENV !== \"production\") {\n    addDebugMetadata(composed, 2);\n  }\n  return createStyledElementComponent(composed);\n};\nexport function autoComposeShallow(styletron, styleArg) {\n  if (typeof styleArg === \"function\") {\n    return dynamicComposeShallow(styletron, styleArg);\n  }\n  return staticComposeShallow(styletron, styleArg);\n}\nfunction addExtension(composed, component, styleArg) {\n  return _objectSpread({}, composed, {\n    ext: {\n      with: styleArg,\n      name: component.displayName,\n      base: component.__STYLETRON__.base,\n      getInitialStyle: component.__STYLETRON__.reducers.length ? component.__STYLETRON__.reducers[0].reducer : component.__STYLETRON__.getInitialStyle\n    }\n  });\n}\nexport function autoComposeDeep(styletron, styleArg) {\n  if (typeof styleArg === \"function\") {\n    return dynamicComposeDeep(styletron, styleArg);\n  }\n  return staticComposeDeep(styletron, styleArg);\n}\nexport function staticComposeShallow(styletron, style) {\n  return composeStatic(styletron, createShallowMergeReducer(style));\n}\nexport function staticComposeDeep(styletron, style) {\n  return composeStatic(styletron, createDeepMergeReducer(style));\n}\nexport function dynamicComposeShallow(styletron, styleFn) {\n  return composeDynamic(styletron, function (style, props) {\n    return shallowMerge(style, styleFn(props));\n  });\n}\nexport function dynamicComposeDeep(styletron, styleFn) {\n  return composeDynamic(styletron, function (style, props) {\n    return deepMerge(style, styleFn(props));\n  });\n}\nexport function createShallowMergeReducer(style) {\n  return {\n    reducer: function reducer(inputStyle) {\n      return shallowMerge(inputStyle, style);\n    },\n    assignmentCommutative: true,\n    factory: createShallowMergeReducer,\n    style: style\n  };\n}\nexport function createDeepMergeReducer(style) {\n  return {\n    reducer: function reducer(inputStyle) {\n      return deepMerge(inputStyle, style);\n    },\n    assignmentCommutative: true,\n    factory: createDeepMergeReducer,\n    style: style\n  };\n}\nexport function composeStatic(styletron, reducerContainer) {\n  if (styletron.reducers.length === 0) {\n    var style = reducerContainer.reducer(styletron.getInitialStyle());\n    var result = {\n      reducers: styletron.reducers,\n      base: styletron.base,\n      driver: styletron.driver,\n      wrapper: styletron.wrapper,\n      getInitialStyle: function getInitialStyle() {\n        return style;\n      }\n    };\n    if (true && process.env.NODE_ENV !== \"production\") {\n      result.debug = styletron.debug;\n    }\n    return result;\n  } else {\n    var last = styletron.reducers[0];\n    if (last.assignmentCommutative === true && reducerContainer.assignmentCommutative === true) {\n      var composed = reducerContainer.reducer(last.style);\n      var _result = {\n        getInitialStyle: styletron.getInitialStyle,\n        base: styletron.base,\n        driver: styletron.driver,\n        wrapper: styletron.wrapper,\n        reducers: [last.factory(composed)].concat(styletron.reducers.slice(1))\n      };\n      if (true && process.env.NODE_ENV !== \"production\") {\n        _result.debug = styletron.debug;\n      }\n      return _result;\n    }\n    return composeDynamic(styletron, reducerContainer.reducer);\n  }\n}\nexport function composeDynamic(styletron, reducer) {\n  var composed = {\n    getInitialStyle: styletron.getInitialStyle,\n    base: styletron.base,\n    driver: styletron.driver,\n    wrapper: styletron.wrapper,\n    // @ts-ignore\n    reducers: [{\n      assignmentCommutative: false,\n      reducer: reducer\n    }].concat(styletron.reducers)\n  };\n  if (true && process.env.NODE_ENV !== \"production\") {\n    composed.debug = styletron.debug;\n  }\n  return composed;\n}\nexport function createStyledElementComponent(styletron) {\n  var reducers = styletron.reducers,\n    base = styletron.base,\n    driver = styletron.driver,\n    wrapper = styletron.wrapper,\n    getInitialStyle = styletron.getInitialStyle,\n    ext = styletron.ext;\n  if (true && process.env.NODE_ENV !== \"production\") {\n    var debugStackInfo, debugStackIndex;\n    if (styletron.debug) {\n      debugStackInfo = styletron.debug.stackInfo;\n      debugStackIndex = styletron.debug.stackIndex;\n    }\n  }\n  if (true && process.env.NODE_ENV !== \"production\") {\n    var debugClassName;\n  }\n  var StyledElement = /*#__PURE__*/React.forwardRef(function (props, ref) {\n    var styletron = React.useContext(StyletronContext);\n    var debugEngine = React.useContext(DebugEngineContext);\n    var hydrating = React.useContext(HydrationContext);\n    checkNoopEngine(styletron);\n    var elementProps = omitPrefixedKeys(props);\n    var style = resolveStyle(getInitialStyle, reducers, props);\n    if (props.$style) {\n      if (typeof props.$style === \"function\") {\n        style = deepMerge(style, props.$style(props));\n      } else {\n        style = deepMerge(style, props.$style);\n      }\n    }\n    var styleClassString = driver(style, styletron);\n    var Element = props.$as ? props.$as : base;\n    elementProps.className = props.className ? \"\".concat(props.className, \" \").concat(styleClassString) : styleClassString;\n    if (true && process.env.NODE_ENV !== \"production\" && debugEngine && !hydrating) {\n      if (!debugClassName) {\n        debugClassName = debugEngine.debug({\n          stackInfo: debugStackInfo,\n          stackIndex: debugStackIndex\n        });\n      }\n      var joined = \"\".concat(debugClassName, \" \").concat(elementProps.className);\n      elementProps.className = joined;\n    }\n    if (true && process.env.NODE_ENV !== \"production\" && window.__STYLETRON_DEVTOOLS__) {\n      window.__STYLETRON_DEVTOOLS__.stylesMap.set(elementProps.className, style);\n      if (ext) {\n        window.__STYLETRON_DEVTOOLS__.extensionsMap.set(elementProps.className, {\n          base: ext.base,\n          displayName: ext.name,\n          initialStyles: ext.getInitialStyle({}, props),\n          styleOverrides: typeof ext.with === \"function\" ? ext.with(props) : ext.with\n        });\n      }\n    }\n    if (props.$ref) {\n      // eslint-disable-next-line no-console\n      console.warn(\"The prop `$ref` has been deprecated. Use `ref` instead. Refs are now forwarded with React.forwardRef.\");\n    }\n    return /*#__PURE__*/React.createElement(Element, _extends({}, elementProps, {\n      ref: ref || props.$ref\n    }));\n  });\n  var Wrapped = wrapper(StyledElement);\n  Wrapped.__STYLETRON__ = {\n    base: base,\n    reducers: reducers,\n    driver: driver,\n    wrapper: wrapper,\n    getInitialStyle: getInitialStyle\n  };\n  if (process.env.NODE_ENV !== \"production\") {\n    var displayName;\n    if (typeof base === \"string\") {\n      displayName = base;\n    } else if (base.displayName) {\n      displayName = base.displayName;\n    } else if (base.name) {\n      displayName = base.name;\n    } else {\n      displayName = \"Unknown\";\n    }\n    Wrapped.displayName = \"Styled(\".concat(displayName, \")\");\n  }\n  return Wrapped;\n} // Utility functions\n\nexport function resolveStyle(getInitialStyle, reducers, props) {\n  var result = getInitialStyle();\n  var i = reducers.length;\n  while (i--) {\n    // Cast to allow passing unused props param in case of static reducer\n    var reducer = reducers[i].reducer;\n    result = reducer(result, props);\n  }\n  return result;\n}\nfunction isObject(x) {\n  return typeof x === \"object\" && x !== null;\n}\nfunction omitPrefixedKeys(source) {\n  var result = {};\n  for (var key in source) {\n    if (key[0] !== \"$\") {\n      result[key] = source[key];\n    }\n  }\n  return result;\n}\nfunction deepMerge(a, b) {\n  var result = assign({}, a);\n  for (var key in b) {\n    var val = b[key];\n    if (isObject(val) && isObject(a[key])) {\n      result[key] = deepMerge(a[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n  return result;\n}\nfunction shallowMerge(a, b) {\n  return assign(assign({}, a), b);\n}\nfunction assign(target, source) {\n  for (var key in source) {\n    target[key] = source[key];\n  }\n  return target;\n}","map":null,"metadata":{},"sourceType":"module"}