{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/* \n\nhigh performance StyleSheet for css-in-js systems \n\n- uses multiple style tags behind the scenes for millions of rules \n- uses `insertRule` for appending in production for *much* faster performance\n- 'polyfills' on server side \n\n\n// usage\n\nimport StyleSheet from 'glamor/lib/sheet'\nlet styleSheet = new StyleSheet()\n\nstyleSheet.inject() \n- 'injects' the stylesheet into the page (or into memory if on server)\n\nstyleSheet.insert('#box { border: 1px solid red; }') \n- appends a css rule into the stylesheet \n\nstyleSheet.flush() \n- empties the stylesheet of all its contents\n\n\n*/\n\nfunction last() {\n  return this[this.length - 1];\n}\nfunction sheetForTag(tag) {\n  if (tag.sheet) {\n    return tag.sheet;\n  }\n\n  // this weirdness brought to you by firefox \n  for (var i = 0; i < document.styleSheets.length; i++) {\n    if (document.styleSheets[i].ownerNode === tag) {\n      return document.styleSheets[i];\n    }\n  }\n}\nvar isBrowser = typeof window !== 'undefined';\nvar isDev = function (x) {\n  return x === 'development' || !x;\n}(process.env.NODE_ENV);\nvar isTest = process.env.NODE_ENV === 'test';\nvar oldIE = function () {\n  if (isBrowser) {\n    var div = document.createElement('div');\n    div.innerHTML = '<!--[if lt IE 10]><i></i><![endif]-->';\n    return div.getElementsByTagName('i').length === 1;\n  }\n}();\nfunction makeStyleTag() {\n  var tag = document.createElement('style');\n  tag.type = 'text/css';\n  tag.appendChild(document.createTextNode(''));\n  (document.head || document.getElementsByTagName('head')[0]).appendChild(tag);\n  return tag;\n}\nexport var StyleSheet = function () {\n  function StyleSheet() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _ref$speedy = _ref.speedy;\n    var speedy = _ref$speedy === undefined ? !isDev && !isTest : _ref$speedy;\n    var _ref$maxLength = _ref.maxLength;\n    var maxLength = _ref$maxLength === undefined ? isBrowser && oldIE ? 4000 : 65000 : _ref$maxLength;\n    _classCallCheck(this, StyleSheet);\n    this.isSpeedy = speedy; // the big drawback here is that the css won't be editable in devtools\n    this.sheet = undefined;\n    this.tags = [];\n    this.maxLength = maxLength;\n    this.ctr = 0;\n  }\n  _createClass(StyleSheet, [{\n    key: 'getSheet',\n    value: function getSheet() {\n      var _context;\n      return sheetForTag((_context = this.tags, last).call(_context));\n    }\n  }, {\n    key: 'inject',\n    value: function inject() {\n      var _this = this;\n      if (this.injected) {\n        throw new Error('already injected stylesheet!');\n      }\n      if (isBrowser) {\n        this.tags[0] = makeStyleTag();\n      } else {\n        // server side 'polyfill'. just enough behavior to be useful.\n        this.sheet = {\n          cssRules: [],\n          insertRule: function insertRule(rule) {\n            // enough 'spec compliance' to be able to extract the rules later  \n            // in other words, just the cssText field \n            _this.sheet.cssRules.push({\n              cssText: rule\n            });\n          }\n        };\n      }\n      this.injected = true;\n    }\n  }, {\n    key: 'speedy',\n    value: function speedy(bool) {\n      if (this.ctr !== 0) {\n        throw new Error('cannot change speedy mode after inserting any rule to sheet. Either call speedy(' + bool + ') earlier in your app, or call flush() before speedy(' + bool + ')');\n      }\n      this.isSpeedy = !!bool;\n    }\n  }, {\n    key: '_insert',\n    value: function _insert(rule) {\n      // this weirdness for perf, and chrome's weird bug \n      // https://stackoverflow.com/questions/20007992/chrome-suddenly-stopped-accepting-insertrule\n      try {\n        var sheet = this.getSheet();\n        sheet.insertRule(rule, sheet.cssRules.length); // todo - correct index here     \n      } catch (e) {\n        if (isDev) {\n          // might need beter dx for this \n          console.warn('whoops, illegal rule inserted', rule); //eslint-disable-line no-console\n        }\n      }\n    }\n  }, {\n    key: 'insert',\n    value: function insert(rule) {\n      if (isBrowser) {\n        // this is the ultrafast version, works across browsers \n        if (this.isSpeedy && this.getSheet().insertRule) {\n          this._insert(rule);\n        }\n        // more browser weirdness. I don't even know    \n        // else if(this.tags.length > 0 && this.tags::last().styleSheet) {      \n        //   this.tags::last().styleSheet.cssText+= rule\n        // }\n        else {\n          var _context2;\n          (_context2 = this.tags, last).call(_context2).appendChild(document.createTextNode(rule));\n        }\n      } else {\n        // server side is pretty simple         \n        this.sheet.insertRule(rule);\n      }\n      this.ctr++;\n      if (isBrowser && this.ctr % this.maxLength === 0) {\n        this.tags.push(makeStyleTag());\n      }\n      return this.ctr - 1;\n    }\n  }, {\n    key: '_replace',\n    value: function _replace(index, rule) {\n      // this weirdness for perf, and chrome's weird bug \n      // https://stackoverflow.com/questions/20007992/chrome-suddenly-stopped-accepting-insertrule\n      try {\n        var sheet = this.getSheet();\n        sheet.deleteRule(index); // todo - correct index here     \n        sheet.insertRule(rule, index);\n      } catch (e) {\n        if (isDev) {\n          // might need beter dx for this \n          console.warn('whoops, problem replacing rule', rule); //eslint-disable-line no-console\n        }\n      }\n    }\n  }, {\n    key: 'replace',\n    value: function replace(index, rule) {\n      if (isBrowser) {\n        if (this.isSpeedy && this.getSheet().insertRule) {\n          this._replace(index, rule);\n        } else {\n          var _slot = Math.floor((index + this.maxLength) / this.maxLength) - 1;\n          var _index = index % this.maxLength + 1;\n          var tag = this.tags[_slot];\n          tag.replaceChild(document.createTextNode(rule), tag.childNodes[_index]);\n        }\n      } else {\n        this.sheet.cssRules = [].concat(_toConsumableArray(this.sheet.cssRules.slice(0, index)), [{\n          cssText: rule\n        }], _toConsumableArray(this.sheet.cssRules.slice(index + 1)));\n      }\n    }\n  }, {\n    key: 'delete',\n    value: function _delete(index) {\n      // we insert a blank rule when 'deleting' so previously returned indexes remain stable\n      return this.replace(index, '');\n    }\n  }, {\n    key: 'flush',\n    value: function flush() {\n      if (isBrowser) {\n        this.tags.forEach(function (tag) {\n          return tag.parentNode.removeChild(tag);\n        });\n        this.tags = [];\n        this.sheet = null;\n        this.ctr = 0;\n        // todo - look for remnants in document.styleSheets\n      } else {\n        // simpler on server \n        this.sheet.cssRules = [];\n      }\n      this.injected = false;\n    }\n  }, {\n    key: 'rules',\n    value: function rules() {\n      if (!isBrowser) {\n        return this.sheet.cssRules;\n      }\n      var arr = [];\n      this.tags.forEach(function (tag) {\n        return arr.splice.apply(arr, [arr.length, 0].concat(_toConsumableArray(Array.from(sheetForTag(tag).cssRules))));\n      });\n      return arr;\n    }\n  }]);\n  return StyleSheet;\n}();","map":null,"metadata":{},"sourceType":"module"}