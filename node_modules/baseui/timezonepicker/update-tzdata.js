"use strict";

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/

/* eslint-env node */
var fs = require('fs');

var path = require('path');

var util = require('util');

var exec = util.promisify(require('child_process').exec); // Download tzdata and collect a list of timezones. Baseui previously used a library
// to do this, but it grew stale and unmaintained. This approach is straightforward
// enough to update whenever necessary, but future improvements could include building
// this data set before baseui is published so that the data is always fresh.

function main() {
  return _main.apply(this, arguments);
}

function _main() {
  _main = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee() {
    var tmpDir, src, zoneTabPath, content, lines, zones, _iterator, _step, line, parts, file, _i, _zones, zone, tzdataPath;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            tmpDir = path.join(__dirname, 'tmp'); // $FlowFixMe - flow is not aware of recursive option

            _context.next = 4;
            return fs.promises.rmdir(tmpDir, {
              recursive: true
            });

          case 4:
            _context.next = 6;
            return fs.promises.mkdir(tmpDir);

          case 6:
            src = "https://www.iana.org/time-zones/repository/tzdata-latest.tar.gz";
            _context.next = 9;
            return exec("curl -L ".concat(src, " | gzip -dc | tar -xf - --directory ").concat(tmpDir));

          case 9:
            zoneTabPath = path.join(tmpDir, 'zone1970.tab');
            _context.next = 12;
            return fs.promises.readFile(zoneTabPath, 'utf-8');

          case 12:
            content = _context.sent;
            lines = content.split('\n');
            zones = [];
            _iterator = _createForOfIteratorHelper(lines);
            _context.prev = 16;

            _iterator.s();

          case 18:
            if ((_step = _iterator.n()).done) {
              _context.next = 26;
              break;
            }

            line = _step.value;

            if (!(line[0] === '#')) {
              _context.next = 22;
              break;
            }

            return _context.abrupt("continue", 24);

          case 22:
            parts = line.split(/\s+/);

            if (parts.length >= 3) {
              zones.push(parts[2]);
            }

          case 24:
            _context.next = 18;
            break;

          case 26:
            _context.next = 31;
            break;

          case 28:
            _context.prev = 28;
            _context.t0 = _context["catch"](16);

            _iterator.e(_context.t0);

          case 31:
            _context.prev = 31;

            _iterator.f();

            return _context.finish(31);

          case 34:
            file = [];
            file.push('/* eslint-disable header/header */');
            file.push('// @flow');
            file.push('');
            file.push('export const zones = [');

            for (_i = 0, _zones = zones; _i < _zones.length; _i++) {
              zone = _zones[_i];
              file.push("  '".concat(zone, "',"));
            }

            file.push('];');
            tzdataPath = path.join(__dirname, 'tzdata.js');
            _context.next = 44;
            return fs.promises.writeFile(tzdataPath, file.join('\n'));

          case 44:
            _context.next = 46;
            return fs.promises.rmdir(tmpDir, {
              recursive: true
            });

          case 46:
            _context.next = 51;
            break;

          case 48:
            _context.prev = 48;
            _context.t1 = _context["catch"](0);
            console.error(_context.t1);

          case 51:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 48], [16, 28, 31, 34]]);
  }));
  return _main.apply(this, arguments);
}

main();